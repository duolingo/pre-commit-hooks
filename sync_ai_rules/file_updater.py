#!/usr/bin/env python3
"""
File updater for maintaining demarcated sections in documentation files.
"""

import os
from typing import Optional, Tuple


def find_demarcated_section(
    content: str,
    start_marker: str = "<auto-generated-rules>",
    end_marker: str = "</auto-generated-rules>",
) -> Tuple[Optional[int], Optional[int]]:
    """
    Find the start and end positions of the auto-generated rules section.

    Args:
        content: File content to search
        start_marker: Optional custom start marker
        end_marker: Optional custom end marker

    Returns:
        Tuple of (start_pos, end_pos) or (None, None) if not found
    """
    start_pos = content.find(start_marker)
    end_pos = content.find(end_marker)

    if start_pos == -1 or end_pos == -1:
        return None, None

    # Include the end marker in the section to be replaced
    end_pos += len(end_marker)

    return start_pos, end_pos


def update_documentation_file(
    file_path: str, new_section: str, section_markers: Tuple[str, str] = None
) -> Tuple[bool, str]:
    """
    Update a documentation file with new rules section.

    Args:
        file_path: Path to documentation file (e.g., CLAUDE.md)
        new_section: New rules section content
        section_markers: Optional custom section markers

    Returns:
        Tuple of (success, message)
    """
    try:
        start_marker = section_markers[0] if section_markers else None
        end_marker = section_markers[1] if section_markers else None

        # Check if file exists
        if os.path.exists(file_path):
            # Read existing file
            with open(file_path, encoding="utf-8") as f:
                content = f.read()

            # Find existing section
            start_pos, end_pos = find_demarcated_section(content, start_marker, end_marker)

            if start_pos is not None and end_pos is not None:
                # Replace existing section
                before = content[:start_pos]
                after = content[end_pos:]
                updated_content = before + new_section + after
                operation = "updated"
            else:
                # No existing section, append to end
                if content and not content.endswith("\n"):
                    content += "\n"
                if content:
                    content += "\n"
                updated_content = content + new_section
                operation = "added"
        else:
            # File doesn't exist, create new one with just the section
            updated_content = new_section
            operation = "created"

        # Create parent directories if they don't exist
        os.makedirs(os.path.dirname(file_path), exist_ok=True)

        # Write updated content
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(updated_content)

        return True, f"Successfully {operation} rules section in {file_path}"

    except Exception as e:
        return False, f"Failed to update {file_path}: {e}"
