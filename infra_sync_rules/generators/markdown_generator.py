#!/usr/bin/env python3
"""
Markdown Generator plugin - generates markdown documentation with XML tags.
"""

from typing import Any, Dict, List

from infra_sync_rules.core.interfaces import OutputGenerator, RuleMetadata


class MarkdownGenerator(OutputGenerator):
    """Generate markdown documentation from rules."""

    @property
    def name(self) -> str:
        return "markdown"

    @property
    def default_filenames(self) -> List[str]:
        return [
            "CLAUDE.md",
            "AGENTS.md",
            ".github/copilot-instructions.md",
        ]

    def generate(self, rules: Dict[str, List[RuleMetadata]], config: Dict[str, Any]) -> str:
        """Generate markdown content with XML tags."""
        lines = [
            "<auto-generated-rules>",
            "<!-- DO NOT EDIT THIS SECTION - Auto-generated from .cursor/rules/ -->",
            "",
            "## Development Rules",
            "Each rule below has the following properties:",
            "- Description: Tells you exactly when to read and apply this rule to your current task",
            "- File scope: Defines which files/directories this rule applies to",
            "- Always apply: false = apply only when relevant; true = always apply this rule",
            "Read the properties of each rule and apply those that match your current task.",
            "When you decide to apply a rule, you MUST read the entire contents of the actual rule file using the file path shown"
            "",
        ]

        # Sort categories (root comes last)
        sorted_categories = sorted(rules.keys(), key=lambda x: (x == "root", x))

        for category in sorted_categories:
            category_rules = rules[category]
            if not category_rules:
                continue

            # Add category heading
            heading = self._format_heading(category)
            lines.append(f"### {heading}")
            lines.append("")

            # Add each rule
            for rule in sorted(category_rules, key=lambda r: r.title):
                lines.extend(self._format_rule(rule))
                lines.append("")

        lines.append("</auto-generated-rules>")
        return "\n".join(lines)

    def get_section_markers(self) -> tuple[str, str]:
        """Return XML tags for the auto-generated section."""
        return ("<auto-generated-rules>", "</auto-generated-rules>")

    def _format_heading(self, category: str) -> str:
        """Format category as heading."""
        if category == "root":
            return "Root Rules"

        # Convert folder name to title case
        return category.replace("-", " ").title()

    def _format_rule(self, rule: RuleMetadata) -> List[str]:
        """Format individual rule as markdown."""
        # Use @ prefix for rule path
        rule_path = f"@{rule.relative_path}"

        # Format file scope
        file_scope = ", ".join(rule.scope_patterns) if rule.scope_patterns else "All files"

        return [
            f"**{rule.title}** â†’ `{rule_path}`",
            "",
            f"- **Description**: {rule.description or 'No description provided'}",
            f"- **File scope**: {file_scope}",
            f"- **Always apply**: {str(rule.always_apply).lower()}",
        ]
